// src/features/faceDetectSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import type { DetectedFace } from "../types"; // Ensure the path is correct

// Define the shape of the state managed by this slice
interface FaceDetectState {
  isWebcamRunning: boolean; // Is the webcam currently active?
  isModelLoading: boolean; // Is the TensorFlow.js model currently loading?
  modelError: string | null; // Any error message during model loading
  detectionError: string | null; // Any error message during face detection
  detectedFaces: DetectedFace[]; // Array of faces detected in the current frame

  // Note: Avoid storing large, non-serializable objects like
  // the TensorFlow model instance or the MediaStream directly in Redux state.
  // Manage those using refs within the component.
}

// Define the initial state for this slice
const initialState: FaceDetectState = {
  isWebcamRunning: false,
  isModelLoading: false, // Assume model is not loading initially
  modelError: null,
  detectionError: null,
  detectedFaces: [],
};

// Create the Redux slice using createSlice from Redux Toolkit
export const faceDetectSlice = createSlice({
  name: "faceDetect", // The name of the slice (used in action types)
  initialState, // The initial state defined above
  reducers: {
    // Action to set the webcam running status
    setWebcamRunning: (state, action: PayloadAction<boolean>) => {
      state.isWebcamRunning = action.payload;
      // When webcam stops, clear detected faces and detection errors
      if (!action.payload) {
        state.detectedFaces = [];
        state.detectionError = null;
      }
    },
    // Action to set the model loading status
    setModelLoading: (state, action: PayloadAction<boolean>) => {
      state.isModelLoading = action.payload;
      // If loading starts, clear any previous model error
      if (action.payload) {
        state.modelError = null;
      }
    },
    // Action to set an error message related to model loading
    setModelError: (state, action: PayloadAction<string | null>) => {
      state.modelError = action.payload;
      state.isModelLoading = false; // Ensure loading state is turned off on error
    },
    // Action to set an error message related to face detection
    setDetectionError: (state, action: PayloadAction<string | null>) => {
      state.detectionError = action.payload;
    },
    // Action to update the list of detected faces
    updateDetectedFaces: (state, action: PayloadAction<DetectedFace[]>) => {
      state.detectedFaces = action.payload;
      // Clear detection error if faces are successfully updated
      state.detectionError = null;
    },
    // Action to clear all errors (optional convenience action)
    clearErrors: (state) => {
      state.modelError = null;
      state.detectionError = null;
    },
  },
});

// Export the action creators generated by createSlice
export const {
  setWebcamRunning,
  setModelLoading,
  setModelError,
  setDetectionError,
  updateDetectedFaces,
  clearErrors, // Export if added
} = faceDetectSlice.actions;

// Export the reducer function generated by createSlice
export default faceDetectSlice.reducer;
